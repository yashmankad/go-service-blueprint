// Protocol buffer definitions for service config

syntax = "proto3";

package test_service;
option go_package = "./";

// Config object for the service
message Config {
    // service related properties like name, logging and REST/RPC endpoints
    ServiceConfig service = 1;

    // logging config (log dir, file, logging level)
    LoggingConfig logging = 2;

    // datastore or repository configuration (connect string, username, password)
    DatastoreConfig datastore = 3;

    // kvstore configuration similar to datastore
    KVStoreConfig kvstore = 4;

    // host configuration for this specific service instance (uuid, hostname, ip) 
    HostConfig host = 5;
}

// ServiceConfig configuration hold generic config details for the service
message ServiceConfig {
    // name represents the service name
    string name = 1;

    // fqdnOrIP is service hostname (DNS name) or IP
    string fqdnOrIP = 2;

    // apiPort is the port where the service listens for incoming REST API requests
    string apiPort = 3;

    // rpcPort represents the port where service listens for incoming RPC requests
    string rpcPort = 4;
}

// LoggingConfig holds logging details for the service
message LoggingConfig {
    // logDir that holds service logs
    string logDir = 1;

    // logFile is the name of the log file
    string logFile = 2;

    // loggingLevel for the service (debug, info, error, fatal, etc)
    string loggingLevel = 3;
}

// DatastoreConfig to connect to the repository
message DatastoreConfig {
    // fqdnOrIP of the database server for connection purpose
    string fqdnOrIP = 1;

    // port where database server listens for incoming requests
    string port = 2;

    // username of database
    string username = 3;

    // password of database
    string password = 4;

    // dbName is the name of the database to access
    string dbName = 5;
}

// KVStoreConfig to connect to a KV store
message KVStoreConfig {
    // fqdnOrIP of the kv store for connection purpose
    string fqdnOrIP = 1;

    // port where kv store listens for incoming requests
    string port = 2;
}

// HostConfig holds configuration related to a specific service instance/host
message HostConfig {
    // uuid for this service instance
    string uuid = 1;

    // instanceName represents the name of the service instance (need not be FQDN)
    string instanceName = 2;
}

